// Code generated by MockGen. DO NOT EDIT.
// Source: internal/broker/mqtt_client.go

// Package broker is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	types "github.com/berrythewa/clipman-daemon/internal/types"
	gomock "github.com/golang/mock/gomock"
)

// MockMQTTClientInterface is a mock of MQTTClientInterface interface.
type MockMQTTClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMQTTClientInterfaceMockRecorder
}

// MockMQTTClientInterfaceMockRecorder is the mock recorder for MockMQTTClientInterface.
type MockMQTTClientInterfaceMockRecorder struct {
	mock *MockMQTTClientInterface
}

// NewMockMQTTClientInterface creates a new mock instance.
func NewMockMQTTClientInterface(ctrl *gomock.Controller) *MockMQTTClientInterface {
	mock := &MockMQTTClientInterface{ctrl: ctrl}
	mock.recorder = &MockMQTTClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMQTTClientInterface) EXPECT() *MockMQTTClientInterfaceMockRecorder {
	return m.recorder
}

// Disconnect mocks base method.
func (m *MockMQTTClientInterface) Disconnect() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Disconnect")
}

// Disconnect indicates an expected call of Disconnect.
func (mr *MockMQTTClientInterfaceMockRecorder) Disconnect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disconnect", reflect.TypeOf((*MockMQTTClientInterface)(nil).Disconnect))
}

// IsConnected mocks base method.
func (m *MockMQTTClientInterface) IsConnected() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsConnected")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsConnected indicates an expected call of IsConnected.
func (mr *MockMQTTClientInterfaceMockRecorder) IsConnected() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsConnected", reflect.TypeOf((*MockMQTTClientInterface)(nil).IsConnected))
}

// PublishContent mocks base method.
func (m *MockMQTTClientInterface) PublishContent(content *types.ClipboardContent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishContent", content)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishContent indicates an expected call of PublishContent.
func (mr *MockMQTTClientInterfaceMockRecorder) PublishContent(content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishContent", reflect.TypeOf((*MockMQTTClientInterface)(nil).PublishContent), content)
}

// RegisterCommandHandler mocks base method.
func (m *MockMQTTClientInterface) RegisterCommandHandler(commandType string, handler func([]byte) error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterCommandHandler", commandType, handler)
}

// RegisterCommandHandler indicates an expected call of RegisterCommandHandler.
func (mr *MockMQTTClientInterfaceMockRecorder) RegisterCommandHandler(commandType, handler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterCommandHandler", reflect.TypeOf((*MockMQTTClientInterface)(nil).RegisterCommandHandler), commandType, handler)
}

// SubscribeToCommands mocks base method.
func (m *MockMQTTClientInterface) SubscribeToCommands() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeToCommands")
	ret0, _ := ret[0].(error)
	return ret0
}

// SubscribeToCommands indicates an expected call of SubscribeToCommands.
func (mr *MockMQTTClientInterfaceMockRecorder) SubscribeToCommands() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToCommands", reflect.TypeOf((*MockMQTTClientInterface)(nil).SubscribeToCommands))
}
