// Code generated by MockGen. DO NOT EDIT.
// Source: internal/clipboard/clipboard.go

// Package clipboard is a generated GoMock package.
package clipboard

import (
	reflect "reflect"

	types "github.com/berrythewa/clipman-daemon/internal/types"
	gomock "github.com/golang/mock/gomock"
)

// MockClipboard is a mock of Clipboard interface.
type MockClipboard struct {
	ctrl     *gomock.Controller
	recorder *MockClipboardMockRecorder
}

// MockClipboardMockRecorder is the mock recorder for MockClipboard.
type MockClipboardMockRecorder struct {
	mock *MockClipboard
}

// NewMockClipboard creates a new mock instance.
func NewMockClipboard(ctrl *gomock.Controller) *MockClipboard {
	mock := &MockClipboard{ctrl: ctrl}
	mock.recorder = &MockClipboardMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClipboard) EXPECT() *MockClipboardMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockClipboard) Read() (*types.ClipboardContent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read")
	ret0, _ := ret[0].(*types.ClipboardContent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockClipboardMockRecorder) Read() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockClipboard)(nil).Read))
}

// Write mocks base method.
func (m *MockClipboard) Write(arg0 *types.ClipboardContent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockClipboardMockRecorder) Write(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockClipboard)(nil).Write), arg0)
}
